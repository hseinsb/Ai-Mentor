rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Validate user document structure
      allow create, update: if request.auth != null 
        && request.auth.uid == userId
        && validateUserData(request.resource.data);
    }
    
    // Profiles collection - users can only access their own profiles
    match /profiles/{profileId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.uid;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      
      // Validate profile document structure
      allow create, update: if request.auth != null 
        && request.auth.uid == request.resource.data.uid
        && validateProfileData(request.resource.data);
    }
    
    // Notes collection - users can only access their own notes
    match /notes/{noteId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.uid;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      
      // Validate note document structure
      allow create, update: if request.auth != null 
        && request.auth.uid == request.resource.data.uid
        && validateNoteData(request.resource.data);
    }
    
    // Messages collection - users can only access their own messages
    match /messages/{messageId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.uid;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      
      // Validate message document structure
      allow create, update: if request.auth != null 
        && request.auth.uid == request.resource.data.uid
        && validateMessageData(request.resource.data);
    }
    
    // Analytics collection - users can only read their own analytics
    match /analytics/{profileId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.uid;
      // Only Cloud Functions can write analytics
      allow write: if false;
    }
    
    // Memories collection - users can only access their own memories
    match /memories/{memoryId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.uid;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      
      // Validate memory document structure
      allow create, update: if request.auth != null 
        && request.auth.uid == request.resource.data.uid
        && validateMemoryData(request.resource.data);
    }
    
    // Guides collection - read-only for all authenticated users
    match /guides/{guideId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admins can write guides
    }
    
    // Guide progress collection - users can only access their own progress
    match /guides_progress/{progressId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.uid;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      
      // Validate progress document structure
      allow create, update: if request.auth != null 
        && request.auth.uid == request.resource.data.uid
        && validateGuideProgressData(request.resource.data);
    }
    
    // Validation functions
    function validateUserData(data) {
      return data.keys().hasAll(['uid', 'created_at', 'updated_at']) &&
             data.uid is string &&
             data.plan in ['free', 'basic', 'pro'] &&
             (data.tone_pref == null || data.tone_pref in ['gentle', 'direct', 'balanced']);
    }
    
    function validateProfileData(data) {
      return data.keys().hasAll(['uid', 'name', 'created_at', 'updated_at']) &&
             data.uid is string &&
             data.name is string &&
             data.name.size() > 0 &&
             data.status in ['active', 'archived'];
    }
    
    function validateNoteData(data) {
      return data.keys().hasAll(['uid', 'profile_id', 'text', 'ts', 'created_at', 'updated_at']) &&
             data.uid is string &&
             data.profile_id is string &&
             data.text is string &&
             data.text.size() > 0;
    }
    
    function validateMessageData(data) {
      return data.keys().hasAll(['uid', 'profile_id', 'role', 'content', 'ts', 'created_at', 'updated_at']) &&
             data.uid is string &&
             data.profile_id is string &&
             data.role in ['user', 'assistant', 'system'] &&
             data.content is string &&
             data.content.size() > 0;
    }
    
    function validateMemoryData(data) {
      return data.keys().hasAll(['uid', 'date', 'created_at', 'updated_at']) &&
             data.uid is string &&
             data.date is timestamp;
    }
    
    function validateGuideProgressData(data) {
      return data.keys().hasAll(['uid', 'guide_id', 'completed', 'created_at', 'updated_at']) &&
             data.uid is string &&
             data.guide_id is string &&
             data.completed is bool;
    }
  }
}
